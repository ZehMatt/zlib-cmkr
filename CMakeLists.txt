# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(ASM686 "" OFF)
option(AMD64 "" OFF)
option(BUILD_SHARED_LIBS "" OFF)
option(ZLIB_BUILD_EXAMPLE "" ON)
option(SKIP_INSTALL_LIBRARIES "" ON)
option(SKIP_INSTALL_ALL "" ON)

project(zlib
	LANGUAGES
		C
)

include("cmake/checks.cmake")
include("cmake/version.cmake")

# Target zlib_common
set(CMKR_TARGET zlib_common)
set(zlib_common_SOURCES "")

set(CMKR_SOURCES ${zlib_common_SOURCES})
add_library(zlib_common INTERFACE)

if(zlib_common_SOURCES)
	target_sources(zlib_common INTERFACE ${zlib_common_SOURCES})
endif()

add_library(zlib::common ALIAS zlib_common)
if(MSVC) # msvc
	target_compile_options(zlib_common INTERFACE
		"/MP"
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target zlib
if(BUILD_SHARED_LIBS) # shared
	set(CMKR_TARGET zlib)
	set(zlib_SOURCES "")

	list(APPEND zlib_SOURCES
		adler32.c
		compress.c
		crc32.c
		deflate.c
		gzclose.c
		gzlib.c
		gzread.c
		gzwrite.c
		inflate.c
		infback.c
		inftrees.c
		inffast.c
		trees.c
		uncompr.c
		zutil.c
		crc32.h
		deflate.h
		gzguts.h
		inffast.h
		inffixed.h
		inflate.h
		inftrees.h
		trees.h
		zutil.h
	)

	list(APPEND zlib_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${zlib_SOURCES})
	add_library(zlib SHARED)

	if(zlib_SOURCES)
		target_sources(zlib PRIVATE ${zlib_SOURCES})
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${zlib_SOURCES})

	add_library(ZLIB::ZLIB ALIAS zlib)
	target_include_directories(zlib PUBLIC
		.
		${CMAKE_CURRENT_BINARY_DIR}
	)

	target_link_libraries(zlib PUBLIC
		zlib::common
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target zlibstatic
if(NOT BUILD_SHARED_LIBS) # static
	set(CMKR_TARGET zlibstatic)
	set(zlibstatic_SOURCES "")

	list(APPEND zlibstatic_SOURCES
		adler32.c
		compress.c
		crc32.c
		deflate.c
		gzclose.c
		gzlib.c
		gzread.c
		gzwrite.c
		inflate.c
		infback.c
		inftrees.c
		inffast.c
		trees.c
		uncompr.c
		zutil.c
		crc32.h
		deflate.h
		gzguts.h
		inffast.h
		inffixed.h
		inflate.h
		inftrees.h
		trees.h
		zutil.h
	)

	list(APPEND zlibstatic_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${zlibstatic_SOURCES})
	add_library(zlibstatic STATIC)

	if(zlibstatic_SOURCES)
		target_sources(zlibstatic PRIVATE ${zlibstatic_SOURCES})
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${zlibstatic_SOURCES})

	add_library(ZLIB::ZLIB ALIAS zlibstatic)
	target_include_directories(zlibstatic PUBLIC
		.
		${CMAKE_CURRENT_BINARY_DIR}
	)

	target_link_libraries(zlibstatic PUBLIC
		zlib::common
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

# Target zlibexample
if(ZLIB_BUILD_EXAMPLE) # example
	set(CMKR_TARGET zlibexample)
	set(zlibexample_SOURCES "")

	list(APPEND zlibexample_SOURCES
		"test/example.c"
	)

	list(APPEND zlibexample_SOURCES
		cmake.toml
	)

	set(CMKR_SOURCES ${zlibexample_SOURCES})
	add_executable(zlibexample)

	if(zlibexample_SOURCES)
		target_sources(zlibexample PRIVATE ${zlibexample_SOURCES})
	endif()

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT zlibexample)
	endif()

	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${zlibexample_SOURCES})

	target_link_libraries(zlibexample PRIVATE
		ZLIB::ZLIB
	)

	unset(CMKR_TARGET)
	unset(CMKR_SOURCES)
endif()

if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL) # install
	install(
		TARGETS
			zlib
			zlibstatic
		CONFIGURATIONS
			Release
			Debug
		DESTINATION
			bin
		COMPONENT
			zlib
	)
endif()
